Grammar

    0 $accept: S $end

    1 S: ROUTINE PROGRAM

    2 PROGRAM: mc_prog idf DEC LIST_INST mc_end

    3 TYPE: mc_real
    4     | mc_integer
    5     | mc_char
    6     | mc_logical

    7 ROUTINE: A ROUTINE
    8        | /* empty */

    9 A: B DEC LIST_INST mc_endr

   10 B: TYPE mc_routine idf po ARGS pf

   11 ARGS: idf vig ARGS
   12     | idf

   13 INST: INST_COND
   14     | INST_AFF
   15     | INST_EQUIVALENCE
   16     | INST_CALL
   17     | INST_READ
   18     | INST_WRITE
   19     | INST_WHILE

   20 INST_COND: C LIST_INST mc_endif

   21 C: D mc_else

   22 D: F pf mc_then LIST_INST

   23 F: mc_if po EXP_ARTH

   24 INST_WHILE: G LIST_INST mc_enddo pvg

   25 G: H po EXP_ARTH pf

   26 H: mc_dowhile

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig po VAR_LIST pf pvg

   28 VAR_LIST: idf vig VAR_LIST
   29         | idf po cst_int pf vig VAR_LIST
   30         | idf po cst_real pf vig VAR_LIST
   31         | idf
   32         | idf po cst_int pf
   33         | idf po cst_real pf
   34         | /* empty */

   35 INST_CALL: idf aff mc_call idf po IDF_LIST pf pvg

   36 IDF_LIST: idf vig IDF_LIST
   37         | idf
   38         | cst_int vig IDF_LIST
   39         | cst_int
   40         | cst_real vig IDF_LIST
   41         | cst_chaine vig IDF_LIST
   42         | cst_chaine

   43 INST_WRITE: mc_write po SMTH pf pvg

   44 SMTH: idf vig SMTH
   45     | cst_chaine vig SMTH
   46     | idf
   47     | cst_chaine

   48 INST_READ: mc_read po idf pf pvg

   49 LIST_INST: INST LIST_INST
   50          | /* empty */

   51 DEC: TYPE idf mc_dimension po cst_int pf pvg DEC
   52    | TYPE idf mc_dimension po cst_int vig cst_int pf pvg DEC
   53    | TYPE LIST_IDF_DEC pvg DEC
   54    | /* empty */

   55 LIST_IDF_DEC: idf vig LIST_IDF_DEC
   56             | idf
   57             | idf aff CST vig LIST_IDF_DEC
   58             | idf aff CST
   59             | idf mul cst_int vig LIST_IDF_DEC
   60             | idf mul cst_int
   61             | idf mul cst_int aff cst_chaine vig LIST_IDF_DEC
   62             | idf mul cst_int aff cst_chaine

   63 CST: cst_chaine
   64    | cst_int
   65    | cst_real
   66    | /* empty */

   67 INST_AFF: idf aff EXP_ARTH pvg

   68 EXP_ARTH: EXP_ARTH plus EXP_ARTH
   69         | EXP_ARTH moin EXP_ARTH
   70         | EXP_ARTH mul EXP_ARTH
   71         | EXP_ARTH divsep EXP_ARTH
   72         | EXP_ARTH mc_ge EXP_ARTH
   73         | EXP_ARTH mc_gt EXP_ARTH
   74         | EXP_ARTH mc_le EXP_ARTH
   75         | EXP_ARTH mc_lt EXP_ARTH
   76         | EXP_ARTH mc_ne EXP_ARTH
   77         | EXP_ARTH mc_eq EXP_ARTH
   78         | EXP_ARTH mc_and EXP_ARTH
   79         | EXP_ARTH mc_or EXP_ARTH
   80         | po EXP_ARTH pf
   81         | OPERANDE

   82 OPERANDE: idf
   83         | idf po INDICE pf
   84         | idf po idf vig idf pf
   85         | cst_int
   86         | cst_real
   87         | cst_chaine
   88         | mc_true
   89         | mc_false

   90 INDICE: idf
   91       | cst_int
   92       | idf vig cst_int
   93       | cst_int vig cst_int
   94       | cst_int vig idf


Terminals, with rules where they appear

$end (0) 0
error (256)
mc_prog (258) 2
mc_end (259) 2
mc_routine (260) 10
mc_endr (261) 9
mc_read (262) 48
mc_write (263) 43
mc_if (264) 23
mc_then (265) 22
mc_else (266) 21
mc_endif (267) 20
mc_dowhile (268) 26
mc_enddo (269) 24
mc_equivalence (270) 27
mul (271) 59 60 61 62 70
mc_call (272) 35
idf (273) 2 10 11 12 28 29 30 31 32 33 35 36 37 44 46 48 51 52 55 56
    57 58 59 60 61 62 67 82 83 84 90 92 94
cst_int (274) 29 32 38 39 51 52 59 60 61 62 64 85 91 92 93 94
cst_real (275) 30 33 40 65 86
aff (276) 35 57 58 61 62 67
pvg (277) 24 27 35 43 48 51 52 53 67
vig (278) 11 27 28 29 30 36 38 40 41 44 45 52 55 57 59 61 84 92 93
    94
po (279) 10 23 25 27 29 30 32 33 35 43 48 51 52 80 83 84
pf (280) 10 22 25 27 29 30 32 33 35 43 48 51 52 80 83 84
cst_chaine (281) 41 42 45 47 61 62 63 87
mc_dimension (282) 51 52
mc_true (283) 88
mc_false (284) 89
moin (285) 69
plus (286) 68
divsep (287) 71
mc_integer (288) 4
mc_char (289) 5
mc_real (290) 3
mc_logical (291) 6
mc_ge (292) 72
mc_gt (293) 73
mc_le (294) 74
mc_lt (295) 75
mc_ne (296) 76
mc_eq (297) 77
mc_and (298) 78
mc_or (299) 79


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
S (46)
    on left: 1, on right: 0
PROGRAM (47)
    on left: 2, on right: 1
TYPE (48)
    on left: 3 4 5 6, on right: 10 51 52 53
ROUTINE (49)
    on left: 7 8, on right: 1 7
A (50)
    on left: 9, on right: 7
B (51)
    on left: 10, on right: 9
ARGS (52)
    on left: 11 12, on right: 10 11
INST (53)
    on left: 13 14 15 16 17 18 19, on right: 49
INST_COND (54)
    on left: 20, on right: 13
C (55)
    on left: 21, on right: 20
D (56)
    on left: 22, on right: 21
F (57)
    on left: 23, on right: 22
INST_WHILE (58)
    on left: 24, on right: 19
G (59)
    on left: 25, on right: 24
H (60)
    on left: 26, on right: 25
INST_EQUIVALENCE (61)
    on left: 27, on right: 15
VAR_LIST (62)
    on left: 28 29 30 31 32 33 34, on right: 27 28 29 30
INST_CALL (63)
    on left: 35, on right: 16
IDF_LIST (64)
    on left: 36 37 38 39 40 41 42, on right: 35 36 38 40 41
INST_WRITE (65)
    on left: 43, on right: 18
SMTH (66)
    on left: 44 45 46 47, on right: 43 44 45
INST_READ (67)
    on left: 48, on right: 17
LIST_INST (68)
    on left: 49 50, on right: 2 9 20 22 24 49
DEC (69)
    on left: 51 52 53 54, on right: 2 9 51 52 53
LIST_IDF_DEC (70)
    on left: 55 56 57 58 59 60 61 62, on right: 53 55 57 59 61
CST (71)
    on left: 63 64 65 66, on right: 57 58
INST_AFF (72)
    on left: 67, on right: 14
EXP_ARTH (73)
    on left: 68 69 70 71 72 73 74 75 76 77 78 79 80 81, on right: 23
    25 67 68 69 70 71 72 73 74 75 76 77 78 79 80
OPERANDE (74)
    on left: 82 83 84 85 86 87 88 89, on right: 81
INDICE (75)
    on left: 90 91 92 93 94, on right: 83


state 0

    0 $accept: . S $end

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 8 (ROUTINE)

    S        go to state 5
    TYPE     go to state 6
    ROUTINE  go to state 7
    A        go to state 8
    B        go to state 9


state 1

    4 TYPE: mc_integer .

    $default  reduce using rule 4 (TYPE)


state 2

    5 TYPE: mc_char .

    $default  reduce using rule 5 (TYPE)


state 3

    3 TYPE: mc_real .

    $default  reduce using rule 3 (TYPE)


state 4

    6 TYPE: mc_logical .

    $default  reduce using rule 6 (TYPE)


state 5

    0 $accept: S . $end

    $end  shift, and go to state 10


state 6

   10 B: TYPE . mc_routine idf po ARGS pf

    mc_routine  shift, and go to state 11


state 7

    1 S: ROUTINE . PROGRAM

    mc_prog  shift, and go to state 12

    PROGRAM  go to state 13


state 8

    7 ROUTINE: A . ROUTINE

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 8 (ROUTINE)

    TYPE     go to state 6
    ROUTINE  go to state 14
    A        go to state 8
    B        go to state 9


state 9

    9 A: B . DEC LIST_INST mc_endr

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 54 (DEC)

    TYPE  go to state 15
    DEC   go to state 16


state 10

    0 $accept: S $end .

    $default  accept


state 11

   10 B: TYPE mc_routine . idf po ARGS pf

    idf  shift, and go to state 17


state 12

    2 PROGRAM: mc_prog . idf DEC LIST_INST mc_end

    idf  shift, and go to state 18


state 13

    1 S: ROUTINE PROGRAM .

    $default  reduce using rule 1 (S)


state 14

    7 ROUTINE: A ROUTINE .

    $default  reduce using rule 7 (ROUTINE)


state 15

   51 DEC: TYPE . idf mc_dimension po cst_int pf pvg DEC
   52    | TYPE . idf mc_dimension po cst_int vig cst_int pf pvg DEC
   53    | TYPE . LIST_IDF_DEC pvg DEC

    idf  shift, and go to state 19

    LIST_IDF_DEC  go to state 20


state 16

    9 A: B DEC . LIST_INST mc_endr

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 39
    INST_AFF          go to state 40


state 17

   10 B: TYPE mc_routine idf . po ARGS pf

    po  shift, and go to state 41


state 18

    2 PROGRAM: mc_prog idf . DEC LIST_INST mc_end

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 54 (DEC)

    TYPE  go to state 15
    DEC   go to state 42


state 19

   51 DEC: TYPE idf . mc_dimension po cst_int pf pvg DEC
   52    | TYPE idf . mc_dimension po cst_int vig cst_int pf pvg DEC
   55 LIST_IDF_DEC: idf . vig LIST_IDF_DEC
   56             | idf .
   57             | idf . aff CST vig LIST_IDF_DEC
   58             | idf . aff CST
   59             | idf . mul cst_int vig LIST_IDF_DEC
   60             | idf . mul cst_int
   61             | idf . mul cst_int aff cst_chaine vig LIST_IDF_DEC
   62             | idf . mul cst_int aff cst_chaine

    mul           shift, and go to state 43
    aff           shift, and go to state 44
    vig           shift, and go to state 45
    mc_dimension  shift, and go to state 46

    $default  reduce using rule 56 (LIST_IDF_DEC)


state 20

   53 DEC: TYPE LIST_IDF_DEC . pvg DEC

    pvg  shift, and go to state 47


state 21

   48 INST_READ: mc_read . po idf pf pvg

    po  shift, and go to state 48


state 22

   43 INST_WRITE: mc_write . po SMTH pf pvg

    po  shift, and go to state 49


state 23

   23 F: mc_if . po EXP_ARTH

    po  shift, and go to state 50


state 24

   26 H: mc_dowhile .

    $default  reduce using rule 26 (H)


state 25

   27 INST_EQUIVALENCE: mc_equivalence . po VAR_LIST pf vig po VAR_LIST pf pvg

    po  shift, and go to state 51


state 26

   35 INST_CALL: idf . aff mc_call idf po IDF_LIST pf pvg
   67 INST_AFF: idf . aff EXP_ARTH pvg

    aff  shift, and go to state 52


state 27

   49 LIST_INST: INST . LIST_INST

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 53
    INST_AFF          go to state 40


state 28

   13 INST: INST_COND .

    $default  reduce using rule 13 (INST)


state 29

   20 INST_COND: C . LIST_INST mc_endif

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 54
    INST_AFF          go to state 40


state 30

   21 C: D . mc_else

    mc_else  shift, and go to state 55


state 31

   22 D: F . pf mc_then LIST_INST

    pf  shift, and go to state 56


state 32

   19 INST: INST_WHILE .

    $default  reduce using rule 19 (INST)


state 33

   24 INST_WHILE: G . LIST_INST mc_enddo pvg

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 57
    INST_AFF          go to state 40


state 34

   25 G: H . po EXP_ARTH pf

    po  shift, and go to state 58


state 35

   15 INST: INST_EQUIVALENCE .

    $default  reduce using rule 15 (INST)


state 36

   16 INST: INST_CALL .

    $default  reduce using rule 16 (INST)


state 37

   18 INST: INST_WRITE .

    $default  reduce using rule 18 (INST)


state 38

   17 INST: INST_READ .

    $default  reduce using rule 17 (INST)


state 39

    9 A: B DEC LIST_INST . mc_endr

    mc_endr  shift, and go to state 59


state 40

   14 INST: INST_AFF .

    $default  reduce using rule 14 (INST)


state 41

   10 B: TYPE mc_routine idf po . ARGS pf

    idf  shift, and go to state 60

    ARGS  go to state 61


state 42

    2 PROGRAM: mc_prog idf DEC . LIST_INST mc_end

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 62
    INST_AFF          go to state 40


state 43

   59 LIST_IDF_DEC: idf mul . cst_int vig LIST_IDF_DEC
   60             | idf mul . cst_int
   61             | idf mul . cst_int aff cst_chaine vig LIST_IDF_DEC
   62             | idf mul . cst_int aff cst_chaine

    cst_int  shift, and go to state 63


state 44

   57 LIST_IDF_DEC: idf aff . CST vig LIST_IDF_DEC
   58             | idf aff . CST

    cst_int     shift, and go to state 64
    cst_real    shift, and go to state 65
    cst_chaine  shift, and go to state 66

    $default  reduce using rule 66 (CST)

    CST  go to state 67


state 45

   55 LIST_IDF_DEC: idf vig . LIST_IDF_DEC

    idf  shift, and go to state 68

    LIST_IDF_DEC  go to state 69


state 46

   51 DEC: TYPE idf mc_dimension . po cst_int pf pvg DEC
   52    | TYPE idf mc_dimension . po cst_int vig cst_int pf pvg DEC

    po  shift, and go to state 70


state 47

   53 DEC: TYPE LIST_IDF_DEC pvg . DEC

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 54 (DEC)

    TYPE  go to state 15
    DEC   go to state 71


state 48

   48 INST_READ: mc_read po . idf pf pvg

    idf  shift, and go to state 72


state 49

   43 INST_WRITE: mc_write po . SMTH pf pvg

    idf         shift, and go to state 73
    cst_chaine  shift, and go to state 74

    SMTH  go to state 75


state 50

   23 F: mc_if po . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 83
    OPERANDE  go to state 84


state 51

   27 INST_EQUIVALENCE: mc_equivalence po . VAR_LIST pf vig po VAR_LIST pf pvg

    idf  shift, and go to state 85

    $default  reduce using rule 34 (VAR_LIST)

    VAR_LIST  go to state 86


state 52

   35 INST_CALL: idf aff . mc_call idf po IDF_LIST pf pvg
   67 INST_AFF: idf aff . EXP_ARTH pvg

    mc_call     shift, and go to state 87
    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 88
    OPERANDE  go to state 84


state 53

   49 LIST_INST: INST LIST_INST .

    $default  reduce using rule 49 (LIST_INST)


state 54

   20 INST_COND: C LIST_INST . mc_endif

    mc_endif  shift, and go to state 89


state 55

   21 C: D mc_else .

    $default  reduce using rule 21 (C)


state 56

   22 D: F pf . mc_then LIST_INST

    mc_then  shift, and go to state 90


state 57

   24 INST_WHILE: G LIST_INST . mc_enddo pvg

    mc_enddo  shift, and go to state 91


state 58

   25 G: H po . EXP_ARTH pf

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 92
    OPERANDE  go to state 84


state 59

    9 A: B DEC LIST_INST mc_endr .

    $default  reduce using rule 9 (A)


state 60

   11 ARGS: idf . vig ARGS
   12     | idf .

    vig  shift, and go to state 93

    $default  reduce using rule 12 (ARGS)


state 61

   10 B: TYPE mc_routine idf po ARGS . pf

    pf  shift, and go to state 94


state 62

    2 PROGRAM: mc_prog idf DEC LIST_INST . mc_end

    mc_end  shift, and go to state 95


state 63

   59 LIST_IDF_DEC: idf mul cst_int . vig LIST_IDF_DEC
   60             | idf mul cst_int .
   61             | idf mul cst_int . aff cst_chaine vig LIST_IDF_DEC
   62             | idf mul cst_int . aff cst_chaine

    aff  shift, and go to state 96
    vig  shift, and go to state 97

    $default  reduce using rule 60 (LIST_IDF_DEC)


state 64

   64 CST: cst_int .

    $default  reduce using rule 64 (CST)


state 65

   65 CST: cst_real .

    $default  reduce using rule 65 (CST)


state 66

   63 CST: cst_chaine .

    $default  reduce using rule 63 (CST)


state 67

   57 LIST_IDF_DEC: idf aff CST . vig LIST_IDF_DEC
   58             | idf aff CST .

    vig  shift, and go to state 98

    $default  reduce using rule 58 (LIST_IDF_DEC)


state 68

   55 LIST_IDF_DEC: idf . vig LIST_IDF_DEC
   56             | idf .
   57             | idf . aff CST vig LIST_IDF_DEC
   58             | idf . aff CST
   59             | idf . mul cst_int vig LIST_IDF_DEC
   60             | idf . mul cst_int
   61             | idf . mul cst_int aff cst_chaine vig LIST_IDF_DEC
   62             | idf . mul cst_int aff cst_chaine

    mul  shift, and go to state 43
    aff  shift, and go to state 44
    vig  shift, and go to state 45

    $default  reduce using rule 56 (LIST_IDF_DEC)


state 69

   55 LIST_IDF_DEC: idf vig LIST_IDF_DEC .

    $default  reduce using rule 55 (LIST_IDF_DEC)


state 70

   51 DEC: TYPE idf mc_dimension po . cst_int pf pvg DEC
   52    | TYPE idf mc_dimension po . cst_int vig cst_int pf pvg DEC

    cst_int  shift, and go to state 99


state 71

   53 DEC: TYPE LIST_IDF_DEC pvg DEC .

    $default  reduce using rule 53 (DEC)


state 72

   48 INST_READ: mc_read po idf . pf pvg

    pf  shift, and go to state 100


state 73

   44 SMTH: idf . vig SMTH
   46     | idf .

    vig  shift, and go to state 101

    $default  reduce using rule 46 (SMTH)


state 74

   45 SMTH: cst_chaine . vig SMTH
   47     | cst_chaine .

    vig  shift, and go to state 102

    $default  reduce using rule 47 (SMTH)


state 75

   43 INST_WRITE: mc_write po SMTH . pf pvg

    pf  shift, and go to state 103


state 76

   82 OPERANDE: idf .
   83         | idf . po INDICE pf
   84         | idf . po idf vig idf pf

    po  shift, and go to state 104

    $default  reduce using rule 82 (OPERANDE)


state 77

   85 OPERANDE: cst_int .

    $default  reduce using rule 85 (OPERANDE)


state 78

   86 OPERANDE: cst_real .

    $default  reduce using rule 86 (OPERANDE)


state 79

   80 EXP_ARTH: po . EXP_ARTH pf

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 105
    OPERANDE  go to state 84


state 80

   87 OPERANDE: cst_chaine .

    $default  reduce using rule 87 (OPERANDE)


state 81

   88 OPERANDE: mc_true .

    $default  reduce using rule 88 (OPERANDE)


state 82

   89 OPERANDE: mc_false .

    $default  reduce using rule 89 (OPERANDE)


state 83

   23 F: mc_if po EXP_ARTH .
   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mul     shift, and go to state 106
    moin    shift, and go to state 107
    plus    shift, and go to state 108
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 23 (F)


state 84

   81 EXP_ARTH: OPERANDE .

    $default  reduce using rule 81 (EXP_ARTH)


state 85

   28 VAR_LIST: idf . vig VAR_LIST
   29         | idf . po cst_int pf vig VAR_LIST
   30         | idf . po cst_real pf vig VAR_LIST
   31         | idf .
   32         | idf . po cst_int pf
   33         | idf . po cst_real pf

    vig  shift, and go to state 118
    po   shift, and go to state 119

    $default  reduce using rule 31 (VAR_LIST)


state 86

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST . pf vig po VAR_LIST pf pvg

    pf  shift, and go to state 120


state 87

   35 INST_CALL: idf aff mc_call . idf po IDF_LIST pf pvg

    idf  shift, and go to state 121


state 88

   67 INST_AFF: idf aff EXP_ARTH . pvg
   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mul     shift, and go to state 106
    pvg     shift, and go to state 122
    moin    shift, and go to state 107
    plus    shift, and go to state 108
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117


state 89

   20 INST_COND: C LIST_INST mc_endif .

    $default  reduce using rule 20 (INST_COND)


state 90

   22 D: F pf mc_then . LIST_INST

    mc_read         shift, and go to state 21
    mc_write        shift, and go to state 22
    mc_if           shift, and go to state 23
    mc_dowhile      shift, and go to state 24
    mc_equivalence  shift, and go to state 25
    idf             shift, and go to state 26

    $default  reduce using rule 50 (LIST_INST)

    INST              go to state 27
    INST_COND         go to state 28
    C                 go to state 29
    D                 go to state 30
    F                 go to state 31
    INST_WHILE        go to state 32
    G                 go to state 33
    H                 go to state 34
    INST_EQUIVALENCE  go to state 35
    INST_CALL         go to state 36
    INST_WRITE        go to state 37
    INST_READ         go to state 38
    LIST_INST         go to state 123
    INST_AFF          go to state 40


state 91

   24 INST_WHILE: G LIST_INST mc_enddo . pvg

    pvg  shift, and go to state 124


state 92

   25 G: H po EXP_ARTH . pf
   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mul     shift, and go to state 106
    pf      shift, and go to state 125
    moin    shift, and go to state 107
    plus    shift, and go to state 108
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117


state 93

   11 ARGS: idf vig . ARGS

    idf  shift, and go to state 60

    ARGS  go to state 126


state 94

   10 B: TYPE mc_routine idf po ARGS pf .

    $default  reduce using rule 10 (B)


state 95

    2 PROGRAM: mc_prog idf DEC LIST_INST mc_end .

    $default  reduce using rule 2 (PROGRAM)


state 96

   61 LIST_IDF_DEC: idf mul cst_int aff . cst_chaine vig LIST_IDF_DEC
   62             | idf mul cst_int aff . cst_chaine

    cst_chaine  shift, and go to state 127


state 97

   59 LIST_IDF_DEC: idf mul cst_int vig . LIST_IDF_DEC

    idf  shift, and go to state 68

    LIST_IDF_DEC  go to state 128


state 98

   57 LIST_IDF_DEC: idf aff CST vig . LIST_IDF_DEC

    idf  shift, and go to state 68

    LIST_IDF_DEC  go to state 129


state 99

   51 DEC: TYPE idf mc_dimension po cst_int . pf pvg DEC
   52    | TYPE idf mc_dimension po cst_int . vig cst_int pf pvg DEC

    vig  shift, and go to state 130
    pf   shift, and go to state 131


state 100

   48 INST_READ: mc_read po idf pf . pvg

    pvg  shift, and go to state 132


state 101

   44 SMTH: idf vig . SMTH

    idf         shift, and go to state 73
    cst_chaine  shift, and go to state 74

    SMTH  go to state 133


state 102

   45 SMTH: cst_chaine vig . SMTH

    idf         shift, and go to state 73
    cst_chaine  shift, and go to state 74

    SMTH  go to state 134


state 103

   43 INST_WRITE: mc_write po SMTH pf . pvg

    pvg  shift, and go to state 135


state 104

   83 OPERANDE: idf po . INDICE pf
   84         | idf po . idf vig idf pf

    idf      shift, and go to state 136
    cst_int  shift, and go to state 137

    INDICE  go to state 138


state 105

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH
   80         | po EXP_ARTH . pf

    mul     shift, and go to state 106
    pf      shift, and go to state 139
    moin    shift, and go to state 107
    plus    shift, and go to state 108
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117


state 106

   70 EXP_ARTH: EXP_ARTH mul . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 140
    OPERANDE  go to state 84


state 107

   69 EXP_ARTH: EXP_ARTH moin . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 141
    OPERANDE  go to state 84


state 108

   68 EXP_ARTH: EXP_ARTH plus . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 142
    OPERANDE  go to state 84


state 109

   71 EXP_ARTH: EXP_ARTH divsep . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 143
    OPERANDE  go to state 84


state 110

   72 EXP_ARTH: EXP_ARTH mc_ge . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 144
    OPERANDE  go to state 84


state 111

   73 EXP_ARTH: EXP_ARTH mc_gt . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 145
    OPERANDE  go to state 84


state 112

   74 EXP_ARTH: EXP_ARTH mc_le . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 146
    OPERANDE  go to state 84


state 113

   75 EXP_ARTH: EXP_ARTH mc_lt . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 147
    OPERANDE  go to state 84


state 114

   76 EXP_ARTH: EXP_ARTH mc_ne . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 148
    OPERANDE  go to state 84


state 115

   77 EXP_ARTH: EXP_ARTH mc_eq . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 149
    OPERANDE  go to state 84


state 116

   78 EXP_ARTH: EXP_ARTH mc_and . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 150
    OPERANDE  go to state 84


state 117

   79 EXP_ARTH: EXP_ARTH mc_or . EXP_ARTH

    idf         shift, and go to state 76
    cst_int     shift, and go to state 77
    cst_real    shift, and go to state 78
    po          shift, and go to state 79
    cst_chaine  shift, and go to state 80
    mc_true     shift, and go to state 81
    mc_false    shift, and go to state 82

    EXP_ARTH  go to state 151
    OPERANDE  go to state 84


state 118

   28 VAR_LIST: idf vig . VAR_LIST

    idf  shift, and go to state 85

    $default  reduce using rule 34 (VAR_LIST)

    VAR_LIST  go to state 152


state 119

   29 VAR_LIST: idf po . cst_int pf vig VAR_LIST
   30         | idf po . cst_real pf vig VAR_LIST
   32         | idf po . cst_int pf
   33         | idf po . cst_real pf

    cst_int   shift, and go to state 153
    cst_real  shift, and go to state 154


state 120

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf . vig po VAR_LIST pf pvg

    vig  shift, and go to state 155


state 121

   35 INST_CALL: idf aff mc_call idf . po IDF_LIST pf pvg

    po  shift, and go to state 156


state 122

   67 INST_AFF: idf aff EXP_ARTH pvg .

    $default  reduce using rule 67 (INST_AFF)


state 123

   22 D: F pf mc_then LIST_INST .

    $default  reduce using rule 22 (D)


state 124

   24 INST_WHILE: G LIST_INST mc_enddo pvg .

    $default  reduce using rule 24 (INST_WHILE)


state 125

   25 G: H po EXP_ARTH pf .

    $default  reduce using rule 25 (G)


state 126

   11 ARGS: idf vig ARGS .

    $default  reduce using rule 11 (ARGS)


state 127

   61 LIST_IDF_DEC: idf mul cst_int aff cst_chaine . vig LIST_IDF_DEC
   62             | idf mul cst_int aff cst_chaine .

    vig  shift, and go to state 157

    $default  reduce using rule 62 (LIST_IDF_DEC)


state 128

   59 LIST_IDF_DEC: idf mul cst_int vig LIST_IDF_DEC .

    $default  reduce using rule 59 (LIST_IDF_DEC)


state 129

   57 LIST_IDF_DEC: idf aff CST vig LIST_IDF_DEC .

    $default  reduce using rule 57 (LIST_IDF_DEC)


state 130

   52 DEC: TYPE idf mc_dimension po cst_int vig . cst_int pf pvg DEC

    cst_int  shift, and go to state 158


state 131

   51 DEC: TYPE idf mc_dimension po cst_int pf . pvg DEC

    pvg  shift, and go to state 159


state 132

   48 INST_READ: mc_read po idf pf pvg .

    $default  reduce using rule 48 (INST_READ)


state 133

   44 SMTH: idf vig SMTH .

    $default  reduce using rule 44 (SMTH)


state 134

   45 SMTH: cst_chaine vig SMTH .

    $default  reduce using rule 45 (SMTH)


state 135

   43 INST_WRITE: mc_write po SMTH pf pvg .

    $default  reduce using rule 43 (INST_WRITE)


state 136

   84 OPERANDE: idf po idf . vig idf pf
   90 INDICE: idf .
   92       | idf . vig cst_int

    vig  shift, and go to state 160

    $default  reduce using rule 90 (INDICE)


state 137

   91 INDICE: cst_int .
   93       | cst_int . vig cst_int
   94       | cst_int . vig idf

    vig  shift, and go to state 161

    $default  reduce using rule 91 (INDICE)


state 138

   83 OPERANDE: idf po INDICE . pf

    pf  shift, and go to state 162


state 139

   80 EXP_ARTH: po EXP_ARTH pf .

    $default  reduce using rule 80 (EXP_ARTH)


state 140

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   70         | EXP_ARTH mul EXP_ARTH .
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 70 (EXP_ARTH)


state 141

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   69         | EXP_ARTH moin EXP_ARTH .
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mul     shift, and go to state 106
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 69 (EXP_ARTH)


state 142

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   68         | EXP_ARTH plus EXP_ARTH .
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mul     shift, and go to state 106
    divsep  shift, and go to state 109
    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 68 (EXP_ARTH)


state 143

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   71         | EXP_ARTH divsep EXP_ARTH .
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_ge   shift, and go to state 110
    mc_gt   shift, and go to state 111
    mc_le   shift, and go to state 112
    mc_lt   shift, and go to state 113
    mc_ne   shift, and go to state 114
    mc_eq   shift, and go to state 115
    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 71 (EXP_ARTH)


state 144

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   72         | EXP_ARTH mc_ge EXP_ARTH .
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 72 (EXP_ARTH)


state 145

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   73         | EXP_ARTH mc_gt EXP_ARTH .
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 73 (EXP_ARTH)


state 146

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   74         | EXP_ARTH mc_le EXP_ARTH .
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 74 (EXP_ARTH)


state 147

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   75         | EXP_ARTH mc_lt EXP_ARTH .
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 75 (EXP_ARTH)


state 148

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   76         | EXP_ARTH mc_ne EXP_ARTH .
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 76 (EXP_ARTH)


state 149

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   77         | EXP_ARTH mc_eq EXP_ARTH .
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH

    mc_and  shift, and go to state 116
    mc_or   shift, and go to state 117

    $default  reduce using rule 77 (EXP_ARTH)


state 150

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   78         | EXP_ARTH mc_and EXP_ARTH .
   79         | EXP_ARTH . mc_or EXP_ARTH

    $default  reduce using rule 78 (EXP_ARTH)


state 151

   68 EXP_ARTH: EXP_ARTH . plus EXP_ARTH
   69         | EXP_ARTH . moin EXP_ARTH
   70         | EXP_ARTH . mul EXP_ARTH
   71         | EXP_ARTH . divsep EXP_ARTH
   72         | EXP_ARTH . mc_ge EXP_ARTH
   73         | EXP_ARTH . mc_gt EXP_ARTH
   74         | EXP_ARTH . mc_le EXP_ARTH
   75         | EXP_ARTH . mc_lt EXP_ARTH
   76         | EXP_ARTH . mc_ne EXP_ARTH
   77         | EXP_ARTH . mc_eq EXP_ARTH
   78         | EXP_ARTH . mc_and EXP_ARTH
   79         | EXP_ARTH . mc_or EXP_ARTH
   79         | EXP_ARTH mc_or EXP_ARTH .

    $default  reduce using rule 79 (EXP_ARTH)


state 152

   28 VAR_LIST: idf vig VAR_LIST .

    $default  reduce using rule 28 (VAR_LIST)


state 153

   29 VAR_LIST: idf po cst_int . pf vig VAR_LIST
   32         | idf po cst_int . pf

    pf  shift, and go to state 163


state 154

   30 VAR_LIST: idf po cst_real . pf vig VAR_LIST
   33         | idf po cst_real . pf

    pf  shift, and go to state 164


state 155

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig . po VAR_LIST pf pvg

    po  shift, and go to state 165


state 156

   35 INST_CALL: idf aff mc_call idf po . IDF_LIST pf pvg

    idf         shift, and go to state 166
    cst_int     shift, and go to state 167
    cst_real    shift, and go to state 168
    cst_chaine  shift, and go to state 169

    IDF_LIST  go to state 170


state 157

   61 LIST_IDF_DEC: idf mul cst_int aff cst_chaine vig . LIST_IDF_DEC

    idf  shift, and go to state 68

    LIST_IDF_DEC  go to state 171


state 158

   52 DEC: TYPE idf mc_dimension po cst_int vig cst_int . pf pvg DEC

    pf  shift, and go to state 172


state 159

   51 DEC: TYPE idf mc_dimension po cst_int pf pvg . DEC

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 54 (DEC)

    TYPE  go to state 15
    DEC   go to state 173


state 160

   84 OPERANDE: idf po idf vig . idf pf
   92 INDICE: idf vig . cst_int

    idf      shift, and go to state 174
    cst_int  shift, and go to state 175


state 161

   93 INDICE: cst_int vig . cst_int
   94       | cst_int vig . idf

    idf      shift, and go to state 176
    cst_int  shift, and go to state 177


state 162

   83 OPERANDE: idf po INDICE pf .

    $default  reduce using rule 83 (OPERANDE)


state 163

   29 VAR_LIST: idf po cst_int pf . vig VAR_LIST
   32         | idf po cst_int pf .

    vig  shift, and go to state 178

    $default  reduce using rule 32 (VAR_LIST)


state 164

   30 VAR_LIST: idf po cst_real pf . vig VAR_LIST
   33         | idf po cst_real pf .

    vig  shift, and go to state 179

    $default  reduce using rule 33 (VAR_LIST)


state 165

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig po . VAR_LIST pf pvg

    idf  shift, and go to state 85

    $default  reduce using rule 34 (VAR_LIST)

    VAR_LIST  go to state 180


state 166

   36 IDF_LIST: idf . vig IDF_LIST
   37         | idf .

    vig  shift, and go to state 181

    $default  reduce using rule 37 (IDF_LIST)


state 167

   38 IDF_LIST: cst_int . vig IDF_LIST
   39         | cst_int .

    vig  shift, and go to state 182

    $default  reduce using rule 39 (IDF_LIST)


state 168

   40 IDF_LIST: cst_real . vig IDF_LIST

    vig  shift, and go to state 183


state 169

   41 IDF_LIST: cst_chaine . vig IDF_LIST
   42         | cst_chaine .

    vig  shift, and go to state 184

    $default  reduce using rule 42 (IDF_LIST)


state 170

   35 INST_CALL: idf aff mc_call idf po IDF_LIST . pf pvg

    pf  shift, and go to state 185


state 171

   61 LIST_IDF_DEC: idf mul cst_int aff cst_chaine vig LIST_IDF_DEC .

    $default  reduce using rule 61 (LIST_IDF_DEC)


state 172

   52 DEC: TYPE idf mc_dimension po cst_int vig cst_int pf . pvg DEC

    pvg  shift, and go to state 186


state 173

   51 DEC: TYPE idf mc_dimension po cst_int pf pvg DEC .

    $default  reduce using rule 51 (DEC)


state 174

   84 OPERANDE: idf po idf vig idf . pf

    pf  shift, and go to state 187


state 175

   92 INDICE: idf vig cst_int .

    $default  reduce using rule 92 (INDICE)


state 176

   94 INDICE: cst_int vig idf .

    $default  reduce using rule 94 (INDICE)


state 177

   93 INDICE: cst_int vig cst_int .

    $default  reduce using rule 93 (INDICE)


state 178

   29 VAR_LIST: idf po cst_int pf vig . VAR_LIST

    idf  shift, and go to state 85

    $default  reduce using rule 34 (VAR_LIST)

    VAR_LIST  go to state 188


state 179

   30 VAR_LIST: idf po cst_real pf vig . VAR_LIST

    idf  shift, and go to state 85

    $default  reduce using rule 34 (VAR_LIST)

    VAR_LIST  go to state 189


state 180

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig po VAR_LIST . pf pvg

    pf  shift, and go to state 190


state 181

   36 IDF_LIST: idf vig . IDF_LIST

    idf         shift, and go to state 166
    cst_int     shift, and go to state 167
    cst_real    shift, and go to state 168
    cst_chaine  shift, and go to state 169

    IDF_LIST  go to state 191


state 182

   38 IDF_LIST: cst_int vig . IDF_LIST

    idf         shift, and go to state 166
    cst_int     shift, and go to state 167
    cst_real    shift, and go to state 168
    cst_chaine  shift, and go to state 169

    IDF_LIST  go to state 192


state 183

   40 IDF_LIST: cst_real vig . IDF_LIST

    idf         shift, and go to state 166
    cst_int     shift, and go to state 167
    cst_real    shift, and go to state 168
    cst_chaine  shift, and go to state 169

    IDF_LIST  go to state 193


state 184

   41 IDF_LIST: cst_chaine vig . IDF_LIST

    idf         shift, and go to state 166
    cst_int     shift, and go to state 167
    cst_real    shift, and go to state 168
    cst_chaine  shift, and go to state 169

    IDF_LIST  go to state 194


state 185

   35 INST_CALL: idf aff mc_call idf po IDF_LIST pf . pvg

    pvg  shift, and go to state 195


state 186

   52 DEC: TYPE idf mc_dimension po cst_int vig cst_int pf pvg . DEC

    mc_integer  shift, and go to state 1
    mc_char     shift, and go to state 2
    mc_real     shift, and go to state 3
    mc_logical  shift, and go to state 4

    $default  reduce using rule 54 (DEC)

    TYPE  go to state 15
    DEC   go to state 196


state 187

   84 OPERANDE: idf po idf vig idf pf .

    $default  reduce using rule 84 (OPERANDE)


state 188

   29 VAR_LIST: idf po cst_int pf vig VAR_LIST .

    $default  reduce using rule 29 (VAR_LIST)


state 189

   30 VAR_LIST: idf po cst_real pf vig VAR_LIST .

    $default  reduce using rule 30 (VAR_LIST)


state 190

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig po VAR_LIST pf . pvg

    pvg  shift, and go to state 197


state 191

   36 IDF_LIST: idf vig IDF_LIST .

    $default  reduce using rule 36 (IDF_LIST)


state 192

   38 IDF_LIST: cst_int vig IDF_LIST .

    $default  reduce using rule 38 (IDF_LIST)


state 193

   40 IDF_LIST: cst_real vig IDF_LIST .

    $default  reduce using rule 40 (IDF_LIST)


state 194

   41 IDF_LIST: cst_chaine vig IDF_LIST .

    $default  reduce using rule 41 (IDF_LIST)


state 195

   35 INST_CALL: idf aff mc_call idf po IDF_LIST pf pvg .

    $default  reduce using rule 35 (INST_CALL)


state 196

   52 DEC: TYPE idf mc_dimension po cst_int vig cst_int pf pvg DEC .

    $default  reduce using rule 52 (DEC)


state 197

   27 INST_EQUIVALENCE: mc_equivalence po VAR_LIST pf vig po VAR_LIST pf pvg .

    $default  reduce using rule 27 (INST_EQUIVALENCE)
